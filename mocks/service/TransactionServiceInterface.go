// Code generated by mockery v2.14.1. DO NOT EDIT.

package service

import (
	entity "pismo/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceInterface is an autogenerated mock type for the TransactionServiceInterface type
type TransactionServiceInterface struct {
	mock.Mock
}

// Insert provides a mock function with given fields: transaction
func (_m *TransactionServiceInterface) Insert(transaction entity.Transaction) (entity.Transaction, error) {
	ret := _m.Called(transaction)

	var r0 entity.Transaction
	if rf, ok := ret.Get(0).(func(entity.Transaction) entity.Transaction); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(entity.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionServiceInterface creates a new instance of TransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionServiceInterface(t mockConstructorTestingTNewTransactionServiceInterface) *TransactionServiceInterface {
	mock := &TransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
